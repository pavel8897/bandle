Webpack

- создать webpack.config.js и создать модули
	{
		"type" : "module"
	}

- установить webpack и webpack-cli

- Начальная сборка webpack.config.js
	export default {
		mode: 'development',
		entry: './src/index.js',
	};

- создать src/index.js
- создать dist/index.html
- создать переменную path
	import path from 'path';
	let test = path.resolve('dist', 'assets');
- "scripts": {
	"build": "webpack",
	"dev":   "webpack --mode development",
	"prod":  "webpack --mode production",
	"watch": "webpack --mode development --watch"
  },

- точка входа
entry: [
	'./src/test1.js',
	'./src/test2.js'
],

- точка выхода
output: {
	filename: 'build.js',
}

- Хеш
	filename: '[name].[contenthash].js',

- Путь к папке сборки
	output: {
		filename: '[name].[contenthash].js',
        path: path.resolve('dist')
	}

- import './styles.css';
- лоадер css
	npm install css-loader --save-dev
	npm install style-loader --save-dev

- импорт css стилей
	export default {
		entry: './src/index.js',
		module: {
			rules: [
				{
					test: /\.css$/i,
					use: ['style-loader', 'css-loader'],
				},
			],
		},
	};

- css бандл
	npm install mini-css-extract-plugin --save-dev

	import MiniCssExtractPlugin from 'mini-css-extract-plugin';

	export default {
		entry: './src/index.js',
		plugins: [new MiniCssExtractPlugin()],
	};

	rules: [
		{
			test: /\.css$/i,
			use: [MiniCssExtractPlugin.loader, 'css-loader'],
		},
	],

- html-webpack-plugin
	npm install html-webpack-plugin --save-dev

	import HtmlWebpackPlugin from 'html-webpack-plugin';

	plugins: [
		new HtmlWebpackPlugin(),
	],


------ Подключаем реакт ------

-- Подключаем babel
	npm install --save-dev babel-loader @babel/core

{
  module: {
    rules: [
      {
        test: /\.m?js$/,
        exclude: /node_modules/,
        use: {
          loader: "babel-loader",
          options: {
            presets: ['@babel/preset-env']
          }
        }
      }
    ]
  }
}

-- Подключаем preset (преобразовывает код для старых браузеров)

	npm install @babel/preset-env --save-dev

	{
		"presets": ["@babel/preset-env"]
	} - !!!!!!!уже имеется

-- устанавливает preset, который будет понимать jsx разметку

npm install --save-dev @babel/preset-react


-- скопируем правило в config

{
  module: {
    rules: [
      {
        test: /\.m?jsx$/,
        exclude: /node_modules/,
        use: {
          loader: "babel-loader",
          options: {
            presets: ['@babel/preset-env', '@babel/preset-react']
          }
        }
      }
    ]
  }
}

-- меняем входной файл на jsx

entry: "/src/index.jsx"


-- устанавливаеи polyfill (что бы babel работал правильно)

npm install --save @babel/polyfill


-- делаем полифил второй входной точкой в приложение:

module.exports = {
  entry: ["@babel/polyfill"],
};

-- меняем расширение базового js на jsx

-- устанавливаем react и reaect-dom

npm i --save react react-dom

- создаём папку components и импортируем React (import React from 'react-dom')
